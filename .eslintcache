[{"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/reportWebVitals.js":"1","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/index.js":"2","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/Button.jsx":"3","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/ManipulationPanel.jsx":"4","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/App.js":"5","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/Field.jsx":"6","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/utils/index.js":"7","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/Navigation.jsx":"8"},{"size":362,"mtime":1611339806536,"results":"9","hashOfConfig":"10"},{"size":500,"mtime":1611339806535,"results":"11","hashOfConfig":"10"},{"size":587,"mtime":1611386702201,"results":"12","hashOfConfig":"10"},{"size":1097,"mtime":1611387009948,"results":"13","hashOfConfig":"10"},{"size":5056,"mtime":1611386420048,"results":"14","hashOfConfig":"10"},{"size":310,"mtime":1611376864905,"results":"15","hashOfConfig":"10"},{"size":664,"mtime":1611385435807,"results":"16","hashOfConfig":"10"},{"size":1317,"mtime":1611386488489,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"su7tno",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/reportWebVitals.js",[],"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/index.js",[],["36","37"],"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/Button.jsx",[],"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/ManipulationPanel.jsx",[],"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/App.js",["38","39"],"import React, { useCallback, useEffect, useState } from 'react';\nimport Navigation from './components/Navigation'\nimport Field from './components/Field'\nimport Button from './components/Button'\nimport ManipulationPanel from './components/ManipulationPanel'\nimport { initFields, getFoodPosition } from './utils'\n\nconst initialPosition = { x: 17, y: 17 }\nconst initialValues = initFields(35, initialPosition)\n\nconst defaultInterval = 100\nconst defaultDifficulty = 3\n\n const Difficulty = [1000, 500, 100, 50, 10]\n\n\nconst GameStatus = Object.freeze({\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover',\n})\n\nconst Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down: 'down'\n})\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x:  1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n})\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n})\n\n\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up'\n})\n\n\nlet timer = undefined\n\nconst unsubscribe = () => {\n  if (!timer) {\n    return\n  }\n  clearInterval(timer)\n}\n\nconst isCollision = (fieldSize, position) => {\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake'\n}\n\n\nfunction App() {\n  const [fields, setFields] = useState(initialValues)\n  const [body, setBody] = useState([])\n  const [direction, setDirection] = useState(Direction.up)\n  const [difficulty, setDifficulty] = useState(defaultDifficulty)\n  const [status, setStatus] = useState(GameStatus.init)\n  const [tick, setTick] = useState(0)\n\n  useEffect(() => {\n    setBody([initialPosition])\n\n    const interval = Difficulty[difficulty - 1]\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, interval)\n    return unsubscribe\n  }, [difficulty])\n\n  useEffect(() => {\n    if (body.length === 0 || status !== GameStatus.playing) {\n      return\n    }\n    const canContinue = handleMoving()\n      if (!canContinue) {\n        setStatus(GameStatus.gameover)\n      }\n  }, [tick])\n\n  const onStart = () => setStatus(GameStatus.playing)\n  const onStop = () => setStatus(GameStatus.suspended)\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    setDirection(Direction.up)\n    setStatus(GameStatus.init)\n    setBody([initialPosition])\n    setFields(initFields(35, initialPosition))\n  }\n\n  const onChangeDirection = useCallback((newDirection) => {\n    if (status !== GameStatus.playing) {\n      return direction\n    }\n    if (OppositeDirection[direction] === newDirection) {\n      return\n    }\n    setDirection(newDirection)\n  }, [direction ,status])\n\n  const onChangeDifficulty = useCallback((difficulty) => {\n    if (status !== GameStatus.init) {\n      return\n    }\n    if (difficulty < 1 || difficulty > Difficulty.length) {\n      return\n    }\n    setDifficulty(difficulty)\n  }, [status, difficulty])\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n\n      onChangeDirection(newDirection);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [onChangeDirection])\n\n\n  const handleMoving = () => {\n    const { x, y } = body[0]\n    const delta = Delta[direction]\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    if (isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n      unsubscribe()\n      return false\n    }\n    const newBody = [...body]\n    if (fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack = newBody.pop()\n      fields[removingTrack.y][removingTrack.x] = ''\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition])\n      fields[food.y][food.x] = 'food'\n    }\n    fields[newPosition.y][newPosition.x] = 'snake'\n    newBody.unshift(newPosition)\n    setBody(newBody)\n    setFields(fields)\n    return true\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={onStop}\n          onStart={onStart}\n          onRestart={onRestart}\n        />\n        <ManipulationPanel onChange={onChangeDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/Field.jsx",[],"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/utils/index.js",[],"/Users/arugatatsuya/Desktop/develop/react-dev/snake-game/hooks-snake-game/src/components/Navigation.jsx",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":106,"column":6,"nodeType":"46","endLine":106,"endColumn":12,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":139,"column":6,"nodeType":"46","endLine":139,"endColumn":26,"suggestions":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body.length', 'handleMoving', and 'status'. Either include them or remove the dependency array.","ArrayExpression",["52"],"React Hook useCallback has an unnecessary dependency: 'difficulty'. Either exclude it or remove the dependency array.",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},"Update the dependencies array to be: [body.length, handleMoving, status, tick]",{"range":"58","text":"59"},"Update the dependencies array to be: [status]",{"range":"60","text":"61"},[2316,2322],"[body.length, handleMoving, status, tick]",[3190,3210],"[status]"]